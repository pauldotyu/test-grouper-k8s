apiVersion: v1
data:
  subject.properties: "#subject.sources.xml.location =\n\nsubjectApi.source.ldap.param.ldapServerId.value
    = demo\n\n\nsubjectApi.source.ldap.id = ldap\nsubjectApi.source.ldap.name = EDU
    Ldap \nsubjectApi.source.ldap.types = person\nsubjectApi.source.ldap.adapterClass
    = edu.internet2.middleware.grouper.subj.GrouperJndiSourceAdapter\n\n## replaced
    with new LDAPTIVE lib\n#subjectApi.source.ldap.param.INITIAL_CONTEXT_FACTORY.value
    = com.sun.jndi.ldap.LdapCtxFactory\n#subjectApi.source.ldap.param.PROVIDER_URL.value
    = ldap://data:389\n#subjectApi.source.ldap.param.SECURITY_AUTHENTICATION.value
    = simple\n#subjectApi.source.ldap.param.SECURITY_PRINCIPAL.value = cn=admin,dc=internet2,dc=edu\n#subjectApi.source.ldap.param.SECURITY_CREDENTIALS.value.elConfig
    = ${java.lang.System.getenv().get('SUBJECT_SOURCE_LDAP_PASSWORD_FILE') != null
    ? org.apache.commons.io.FileUtils.readFileToString(java.lang.System.getenv().get('SUBJECT_SOURCE_LDAP_PASSWORD_FILE'),
    \"utf-8\") : java.lang.System.getenv().get('SUBJECT_SOURCE_LDAP_PASSWORD')}\n#subjectApi.source.ldap.param.VTLDAP_VALIDATOR.value
    = ConnectLdapValidator\n\nsubjectApi.source.ldap.param.SubjectID_AttributeType.value
    = uid\nsubjectApi.source.ldap.param.SubjectID_formatToLowerCase.value = false\nsubjectApi.source.ldap.param.Name_AttributeType.value
    = cn\nsubjectApi.source.ldap.param.Description_AttributeType.value = cn\nsubjectApi.source.ldap.param.subjectVirtualAttribute_0_searchAttribute0.value
    = ${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('uid'),
    \"\")},${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('cn'),
    \"\")},${subjectUtils.defaultIfBlank(subject.getAttributeValueOrCommaSeparated('exampleEduRegId'),
    \"\")}\nsubjectApi.source.ldap.param.sortAttribute0.value = cn\nsubjectApi.source.ldap.param.searchAttribute0.value
    = searchAttribute0\n\n# STATUS SECTION for searches to filter out inactives and
    allow\n# the user to filter by status with e.g. status=all\n# this is optional,
    and advanced\n#\n# field in database or ldap or endpoint that is the status field\n#subjectApi.source.example.param.statusDatastoreFieldName.value
    = status\n\n# search string from user which represents the status.  e.g. status=active\n#subjectApi.source.example.param.statusLabel.value
    = status\n\n# available statuses from screen (if not specified, any will be allowed).
    comma separated list.\n# Note, this is optional and you probably dont want to
    configure it, it is mostly necessary\n# when you have multiple sources with statuses...
    \ if someone types an invalid status\n# and you have this configured, it will
    not filter by it\n#subjectApi.source.example.param.statusesFromUser.value = Active,
    Inactive, Pending, All\n\n# all label from the user\n#subjectApi.source.example.param.statusAllFromUser.value
    = All\n\n# if no status is specified, this will be used (e.g. for active only).
    \ Note, the value should be of the\n# form the user would type in\n#subjectApi.source.example.param.statusSearchDefault.value
    = status=active\n\n# translate between screen values of status, and the data store
    value.  Increment the 0 to 1, 2, etc for more translations.\n# so the user could
    enter: status=active, and that could translate to status_col=A.  The 'user' is
    what the user types in,\n# the 'datastore' is what is in the datastore.  The user
    part is not case-sensitive.  Note, this could be a many to one\n#subjectApi.source.example.param.statusTranslateUser0.value
    = active\n#subjectApi.source.example.param.statusTranslateDatastore0.value = A\n\n#
    subject identifier to store in grouper's member table.  this is used to increase
    speed of loader and perhaps for provisioning\n# you can have up to max 1 subject
    identifier\n#subjectApi.source.example.param.subjectIdentifierAttribute0.value
    = uid\n\n#searchSubject: find a subject by ID.  ID is generally an opaque and
    permanent identifier, e.g. 12345678.\n#  Each subject has one and only on ID.
    \ Returns one result when searching for one ID.\nsubjectApi.source.ldap.search.searchSubject.param.filter.value
    = (&(uid=%TERM%)(objectclass=person))\nsubjectApi.source.ldap.search.searchSubject.param.scope.value
    = SUBTREE_SCOPE\nsubjectApi.source.ldap.search.searchSubject.param.base.value
    = ou=people\n\n#searchSubjectByIdentifier: find a subject by identifier.  Identifier
    is anything that uniquely\n#  identifies the user, e.g. jsmith or jsmith@institution.edu.\n#
    \ Subjects can have multiple identifiers.  Note: it is nice to have if identifiers
    are unique\n#  even across sources.  Returns one result when searching for one
    identifier.\nsubjectApi.source.ldap.search.searchSubjectByIdentifier.param.filter.value
    = (&(|(uid=%TERM%)(employeeNumber=%TERM%))(objectclass=person))\nsubjectApi.source.ldap.search.searchSubjectByIdentifier.param.scope.value
    = SUBTREE_SCOPE\nsubjectApi.source.ldap.search.searchSubjectByIdentifier.param.base.value
    = ou=people\n\n#   search: find subjects by free form search.  Returns multiple
    results.\n\nsubjectApi.source.ldap.search.search.param.filter.value = (&(|(|(uid=%TERM%)(cn=*%TERM%*))(uid=%TERM%*))(objectclass=person))\nsubjectApi.source.ldap.search.search.param.scope.value
    = SUBTREE_SCOPE\nsubjectApi.source.ldap.search.search.param.base.value = ou=people\n\nsubjectApi.source.ldap.attributes
    = givenName, sn, uid, mail, employeeNumber\nsubjectApi.source.ldap.internalAttributes
    = searchAttribute0\n"
kind: ConfigMap
metadata:
  name: subject-properties
  namespace: test
# immutable: true
